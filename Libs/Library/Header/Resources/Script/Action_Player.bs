public var transParam:TranslateParameter;
private var leftSensor:ButiScriptBehavior;
private var rightSensor:ButiScriptBehavior;
private var frontSensor:ButiScriptBehavior;
private var backSensor:ButiScriptBehavior;
private var panelTransform:Transform;
private var direction:int;
private var rotationAnim:float;
function main():int
{
	var velocity:Vector3;
	if(CheckKeyBoard(Keys.D)){
		velocity.x=1.0;
		if(direction!=1){
			direction=1;
			rotationAnim=0;
		}
	}
	if(CheckKeyBoard(Keys.A)){
		velocity.x=-1.0;
		if(direction!=-1){
			direction= -1;
			rotationAnim=0;
		}
	}
	if(CheckKeyBoard(Keys.W)){
		velocity.z=1.0;
	}
	if(CheckKeyBoard(Keys.S)){
		velocity.z=-1.0;
	}
	velocity.Normalize();
	velocity=transParam.GetMoveOffset(velocity);
	GetGameObject().GetTransform().Translate(velocity);
	if(rotationAnim<=1.0){
		rotationAnim+=0.1;
		panelTransform.SetLocalRotationY_Degrees(direction* 180.0*GetEase(rotationAnim, EasingType.EaseOutCirc));
	}
	return 0;
}

function OnCollision(arg_obj:GameObject):void{
	if(leftSensor.Execute<int>("IsCollision",arg_obj)){
		var otherTransform:Transform;
		var otherpos:Vector3;
		var otherscale:Vector3;
		var ownpos:Vector3;
		otherTransform=arg_obj.GetTransform();
		otherpos=(otherTransform.GetWorldPosition());
		otherscale=otherTransform.GetLocalScale();
		ownpos=GetGameObject().GetTransform().GetWorldPosition();
		GetGameObject().GetTransform().TranslateX((otherpos.x+otherscale.x*0.5) -(ownpos.x-0.5 ));
		return;
	}
	if(rightSensor.Execute<int>("IsCollision",arg_obj)){
		var otherTransform:Transform;
		var otherpos:Vector3;
		var otherscale:Vector3;
		var ownpos:Vector3;
		otherTransform=arg_obj.GetTransform();
		otherpos=(otherTransform.GetWorldPosition());
		otherscale=otherTransform.GetLocalScale();
		ownpos=GetGameObject().GetTransform().GetWorldPosition();
		GetGameObject().GetTransform().TranslateX((otherpos.x-otherscale.x*0.5)-(ownpos.x+0.5 ));
		return;
	}
	if(backSensor.Execute<int>("IsCollision",arg_obj)){
		var otherTransform:Transform;
		var otherpos:Vector3;
		var otherscale:Vector3;
		var ownpos:Vector3;
		otherTransform=arg_obj.GetTransform();
		otherpos=(otherTransform.GetWorldPosition());
		otherscale=otherTransform.GetLocalScale();
		ownpos=GetGameObject().GetTransform().GetWorldPosition();
		GetGameObject().GetTransform().TranslateZ((otherpos.z+otherscale.z*0.5) -(ownpos.z-0.5 ));
		return;
	}
	if(frontSensor.Execute<int>("IsCollision",arg_obj)){
		var otherTransform:Transform;
		var otherpos:Vector3;
		var otherscale:Vector3;
		var ownpos:Vector3;
		otherTransform=arg_obj.GetTransform();
		otherpos=(otherTransform.GetWorldPosition());
		otherscale=otherTransform.GetLocalScale();
		ownpos=GetGameObject().GetTransform().GetWorldPosition();
		GetGameObject().GetTransform().TranslateZ((otherpos.z-otherscale.z*0.5)-(ownpos.z+0.5 ));
		return;
	}
}
function OnCollisionEnter(arg_obj:GameObject):void{
	OnCollision(arg_obj);
}
function OnCollisionEnd(arg_obj:GameObject):void{
}
function OnStart():void{
    transParam.speed=0.1;
	var objectName:string;
	objectName=GetGameObject().GetName();
	leftSensor=GetGameObject(objectName+ "_leftSensor").GetScriptBehavior();
	rightSensor=GetGameObject(objectName+ "_rightSensor").GetScriptBehavior();
	frontSensor=GetGameObject(objectName+ "_frontSensor").GetScriptBehavior();
	backSensor=GetGameObject(objectName+ "_backSensor").GetScriptBehavior();
	panelTransform=GetGameObject("PlayerView").GetTransform();
	direction=1;
	rotationAnim=2.0;
}

class TranslateParameter{
	public speed:float; 
	public verticalSpeed:float; 


	GetMoveOffset(velocity:Vector3):Vector3{
		velocity.x*=this.speed;
		velocity.z*=this.speed;
		velocity.y*=this.verticalSpeed;

		return velocity;
	}

}